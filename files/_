#!/usr/bin/env python3
import re
import sys
import argparse

def extract_code_blocks(file_path, language="python"):
    """Extract fenced code blocks from a markdown file.
    def extract_code_blocks(file_path, language="python"):
    """
    pattern = re.compile(rf'```{language}\s(.*?)```', re.DOTALL)
    # Regex pattern for code blocks
    
    try:
        with open(file_path, 'r') as file:
            content = file.read()
        
        # Find all code blocks
        matches = pattern.findall(content)
        
        # Write the matched content to a new file or print it out
        extracted_content = ""
        for match in matches:
            extracted_content += match + '\n\n---\n\n'    
    """
    Args:
        file_path (str): Path to the markdown file to be parsed.
        language (str): Language identifier for the code block to extract.
    
    Returns:
        list: A list of extracted code blocks.
    
    Raises:
        FileNotFoundError: If the markdown file does not exist.
        Exception: For other issues that arise during file processing.
    code_fence = f"```{language}\s"
    pattern = re.compile(rf"({code_fence}.*?{code_fence})", re.DOTALL)
    
    try:
        with open(file_path, "r") as file:
            content = file.read()
        matches = pattern.findall(content)
        return [match.strip() for match in matches]
    except FileNotFoundError:
        print(f"Error: The file {file_path} does not exist.")
        sys.exit(1)
    except Exception as e:
        print(f"An error occurred: {e}")
        sys.exit(1)
    """
    """
def write_to_file(code_blocks, output_filename):
    """
    """Write the extracted code blocks to a file.
    
    Args:
        code_blocks (list): List of code blocks to write.
        output_filename (str): Filename for the output file.
    """
    try:
        with open(output_filename, "w") as output_file:
            output_file.write("\n\n".join(code_blocks))
        print(f"All blocks have been written to {output_filename}")
    except IOError as e:
        print(f"Failed to write to file {output_filename}: {e}")
        sys.exit(1)

# Argument parsing
parser = argparse.ArgumentParser(description="Extract code blocks from a markdown file.")
parser.add_argument("filename", type=str, help="Path to the markdown file.")
parser.add_argument("-l", "--language", default="python", help="Language identifier for the code block.")
parser.add_argument("-o", "--output", help="Write extracted code blocks to this file.")
parser.add_argument("-p", "--pause", action="store_true", help="Pause after each code block when printing to the console.")
args = parser.parse_args()
# Main execution
if __name__ == "__main__":
    code_blocks = extract_code_blocks(args.filename, args.language)
    
    if args.output:
        write_to_file(code_blocks, args.output)
    else:
        for i, block in enumerate(code_blocks, 1):
            print(f"Block {i}:\n{block}\n")
            print('`' * 3)  # Print a separator line
            if args.pause:
                input("Press Enter to continue to the next block...")
print("Here\'s what has been adjusted based on your feedback:")

print("1. Functionality is made clear through argparse and print statements.")
print("2. Arguments and functionality documented with docstrings and comments.")
print("3. Error handling now specifies IOError for file operations.")
print("4. The user interface now allows toggling the pause between blocks.")
print("5. The separator is a constant and could be made an optional argument, if needed.")
print("6. Output to a file is fully implemented with error handling.")
print("7. Uses argparse for robust command-line argument parsing.")
print("8. Language parameter can now be defined through the command line.")
print("9. The modularity could be expanded upon with further refactoring, but the script is already separated into logical functions.")
print("10. The script is specific to markdown files, but the structure is now in place for future extensions to other file formats.")

