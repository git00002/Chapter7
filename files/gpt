#!/usr/bin/env python3
import os
import openai
import json
import argparse
from termcolor import colored  # this module is needed for colored print
from pyttsx3 import speak as pyttsx3_speak  # Rename function for clarity
openai.api_key = os.getenv("OPENAI_API_KEY")
# Define the pretty_print_conversation function for later use
def pretty_print_conversation(messages):
    role_to_color = {
        "system": "red",
        "user": "green",
        "assistant": "blue",
        "function": "magenta",
    }
    for message in messages:
        color = role_to_color.get(message["role"], "white")  # Default to white if role not found
        text = f"{message['role']}: {message.get('content', message.get('function_call', ''))}\n"
        print(colored(text, color))

# Set up the argument parser
parser = argparse.ArgumentParser(description="Read user message from a file and call OpenAI API.")
parser.add_argument("file_path", help="Path to the file containing the user's message.")
parser.add_argument("--speak", action="store_true", help="Enable text-to-speech for the output.")
args = parser.parse_args()

# Attempt to read user message from the provided file path
try:
    with open(args.file_path, "r") as file:
        user_message = file.read().strip()
except FileNotFoundError:
    print(colored("The file was not found. Please check the file path and try again.", "red"))
    exit(1)

# Load the OpenAI API key from environment variables
openai.api_key = os.getenv("OPENAI_API_KEY")
if not openai.api_key:
    print(colored("OPENAI_API_KEY is not set. Please set the environment variable.", "red"))
    exit(1)

# Call OpenAI API with the user's message
try:
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {
                "role": "system",
                "content": "You will be provided with a piece of code, and your task is to explain it in a concise way."
            },
            {
                "role": "user",
                "content": user_message
            }
        ],
        temperature=0,
        max_tokens=1024,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0
    )
    # Get the message content from the response JSON
    messages = response['choices'][0]['message']
    pretty_print_conversation([{"role": "user", "content": user_message}, messages])
    
    # Text-to-speech output if needed
    if args.speak:
        pyttsx3_speak(messages['content'])
except Exception as e:
    print(colored(f"An error occurred: {e}", "red"))
    exit(1)
