#!/bin/bash

# Define a dictionary of predefined intents and responses
declare -A intents
intents["greet"]="Hello! How can I help you?"
intents["goodbye"]="Goodbye! Have a great day!"
intents["help"]="I can assist with basic tasks. Try asking a question."
intents["unknown"]="I'm sorry, I don't understand that command."

# Function to process user input and return a response
process_input() {
local input_text="$1"
input_text=$(echo "$input_text" | tr [:upper:] [:lower:]) # Convert input to lowercase for case insensitivity

# Check for predefined intents and respond accordingly
case "$input_text" in
*hello*)
openai api chat_completions.create -m gpt-3.5-turbo -g user "${intents["help"]}" "${intents["greet"]}"
;;
*goodbye*)
echo "${intents["goodbye"]}"
;;
*help*)
openai api chat_completions.create -m gpt-4 -g user "${intents["help"]}"
;;
*create*)
# Extract the project argument from the command
project=$(echo "$input_text" | awk '{print $3}')
echo "Running custom command: palmai api completions.create -e palm2-googlegenerativeai -p \"$project\""
# Call the actual command here
palmai api completions.create -e palm2-googlegenerativeai -p "$project"
;;
**)
echo "${intents["unknown"]}"
;;
esac
}

# Main loop for user interaction
while true; do
read -p "You: " user_input
if [ "$user_input" = "exit" ]; then
echo "Chatbot: Goodbye!"
break
fi

response=$(process_input "$user_input")
echo "Chatbot: $response"
done

#!/usr/bin/env python3
import pyttsx3
import threading
import queue

class IDE_REPL:
    def __init__(self):
        self.session = {}  # Storing variables, functions, and states.
        self.speak_queue = queue.Queue()
        self.setup_tts()

    def setup_tts(self):
        self.engine = pyttsx3.init()

        def tts_worker():
            while True:
                text = self.speak_queue.get()
                if text == "EXIT":
                    break
                self.engine.say(text)
                self.engine.runAndWait()

        threading.Thread(target=tts_worker, daemon=True).start()

    def speak(self, text):
        self.speak_queue.put(text)

    def execute(self, command):
        try:
            # Dynamically execute the user's command
            output = eval(command, {}, self.session)
            return output
        except Exception as e:
            return str(e)

    def start(self):
        while True:
            command_prompt = "IDE>>> "
            command = input(command_prompt)
            if command.lower() in ['exit', 'quit']:
                self.speak_queue.put("EXIT")
                break
            result = self.execute(command)
            print(result)
            self.speak(command_prompt + command + str(result))

ide_repl = IDE_REPL()
ide_repl.start()


"""

import pyttsx3

class IDE_REPL:
    def __init__(self):
        self.session = {}  # Storing variables, functions, and states.
        self.engine = pyttsx3.init()  # Initialize the TTS engine
    
    def speak(self, text):
        self.engine.say(text)
        self.engine.runAndWait()

    def execute(self, command):
        try:
            # Dynamically execute the user's command
            output = eval(command, {}, self.session)
            return output
        except Exception as e:
            return str(e)

    def start(self):
        while True:
            command_prompt = "IDE>>> "
            command = input(command_prompt)
            if command.lower() in ['exit', 'quit']:
                break
            result = self.execute(command)
            print(result)
            self.speak(command_prompt + command + str(result))

ide_repl = IDE_REPL()
ide_repl.start()


import pyttsx3

class IDE_REPL:
    def __init__(self):
        self.session = {}  # Storing variables, functions, and states.
        self.engine = pyttsx3.init()  # Initialize the TTS engine
    
    def speak(self, text):
        self.engine.say(text)
        self.engine.runAndWait()

    def execute(self, command):
        try:
            # Dynamically execute the user's command
            output = eval(command, {}, self.session)
            return output
        except Exception as e:
            return str(e)

    def start(self):
        while True:
            command_prompt = "IDE>>> "
            print(command_prompt, end="")
            self.speak(command_prompt)
            command = input()
            if command.lower() in ['exit', 'quit']:
                break
            result = self.execute(command)
            print(result)
            self.speak(str(result))

ide_repl = IDE_REPL()
ide_repl.start()

class IDE_REPL:
    def __init__(self):
        self.session = {}  # Storing variables, functions, and states.
        self.engine = pyttsx3.init()  # Initialize the TTS engine
    
    def speak(self, text):
        self.engine.say(text)
        self.engine.runAndWait()

    def execute(self, command):
        try:
            # Dynamically execute the user's command
            output = eval(command, {}, self.session)
            return output
        except Exception as e:
            return str(e)

    def start(self):
        while True:
            self.speak("Enter your command:")
            command = input("IDE>>> ")
            if command.lower() in ['exit', 'quit']:
                break
            result = self.execute(command)
            print(result)
            self.speak(f"Output: {result}")

ide_repl = IDE_REPL()
ide_repl.start()

import pyttsx3

class IDE_REPL:
    def __init__(self):
        self.session = {}  # Storing variables, functions, and states.
        self.engine = pyttsx3.init()  # Initialize the TTS engine
    
    def speak(self, text):
        self.engine.say(text)
        self.engine.runAndWait()

    def execute(self, command):
        try:
            # Dynamically execute the user's command
            output = eval(command, {}, self.session)
            return output
        except Exception as e:
            return str(e)

    def start(self):
        while True:
            self.speak("Enter your command:")
            command = input("IDE>>> ")
            if command.lower() in ['exit', 'quit']:
                break
            result = self.execute(command)
            print(result)

ide_repl = IDE_REPL()
ide_repl.start()



class IDE_REPL:
    def __init__(self):
        self.session = {}  # Storing variables, functions, and states.
    
    def execute(self, command):
        try:
            # Dynamically execute the user's command
            output = eval(command, {}, self.session)
            return output
        except Exception as e:
            return str(e)
    
    def start(self):
        while True:
            command = input("IDE>>> ")
            if command.lower() in ['exit', 'quit']:
                break
            result = self.execute(command)
            print(result)

ide_repl = IDE_REPL()
ide_repl.start()
"""
